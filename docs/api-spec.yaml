openapi: 3.0.3
info:
  title: Acorn Pups API
  description: |
    REST API for managing Acorn Pups devices and user interactions.
    
    This API provides endpoints for:
    - Device registration and management
    - User access control and invitations
    - Device settings and reset functionality
    - Health monitoring
    
    ## Authentication
    Most endpoints require authentication via AWS Cognito JWT tokens.
    Include the token in the Authorization header: `Bearer <token>`
    
    ## Rate Limiting
    - Development: 100 requests/second, 200 burst
    - Production: 1000 requests/second, 2000 burst
    
    ## System Architecture
    - RF buttons send signals directly to ESP32 receivers (no API involvement)
    - ESP32 receivers process button presses in real-time
    - Push notifications sent to all authorized users
    - No persistent storage of button press events (MVP)
    
  version: 1.0.0
  contact:
    name: Acorn Pups Team
    email: api@acornpups.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api-dev.acornpups.com
    description: Development server
  - url: https://api.acornpups.com
    description: Production server

security:
  - CognitoAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns API health status and basic information
      tags:
        - System
      security: [] # No authentication required
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/register:
    post:
      summary: Register a new device
      description: Register a new ESP32 receiver device for the authenticated user
      tags:
        - Device Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRegistrationRequest'
      responses:
        '201':
          description: Device registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceRegistrationResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Device already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/devices:
    get:
      summary: Get user's devices
      description: Retrieve all devices accessible by the specified user
      tags:
        - Device Management
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: List of user's devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevicesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceId}/settings:
    put:
      summary: Update device settings
      description: Update configuration settings for a specific ESP32 receiver device
      tags:
        - Device Management
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceSettingsRequest'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceSettingsResponse'
        '400':
          description: Invalid settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceId}/reset:
    post:
      summary: Reset device
      description: Initiate factory reset of an ESP32 receiver device and clean up all associated data
      tags:
        - Device Management
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: Device reset initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResetResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceId}/invite:
    post:
      summary: Invite user to device
      description: Send an invitation to a user to access a device
      tags:
        - User Management
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInviteRequest'
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInviteResponse'
        '400':
          description: Invalid invitation request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceId}/users/{userId}:
    delete:
      summary: Remove user access from device
      description: Remove a user's access to a device
      tags:
        - User Management
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID to remove
      responses:
        '204':
          description: User access removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Device or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/invitations:
    get:
      summary: Get user's pending invitations
      description: Retrieve all pending device invitations for the specified user
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: List of user's pending invitations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /invitations/{invitationId}/accept:
    post:
      summary: Accept device invitation
      description: Accept an invitation to access a device
      tags:
        - User Management
      parameters:
        - name: invitationId
          in: path
          required: true
          schema:
            type: string
          description: Invitation ID
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationActionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Invitation not found or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Invitation already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /invitations/{invitationId}/decline:
    post:
      summary: Decline device invitation
      description: Decline an invitation to access a device
      tags:
        - User Management
      parameters:
        - name: invitationId
          in: path
          required: true
          schema:
            type: string
          description: Invitation ID
      responses:
        '200':
          description: Invitation declined successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationActionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Invitation not found or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Invitation already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    CognitoAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: AWS Cognito JWT token

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            message: "Authentication required"
            requestId: "abc-123-def"
    
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Forbidden"
            message: "Insufficient permissions"
            requestId: "abc-123-def"

  schemas:
    SuccessResponse:
      type: object
      properties:
        data:
          type: object
          description: Response data
        requestId:
          type: string
          description: Unique request identifier
      required:
        - data
        - requestId

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        requestId:
          type: string
          description: Unique request identifier
      required:
        - error
        - message
        - requestId

    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                timestamp:
                  type: string
                  format: date-time
                environment:
                  type: string
                version:
                  type: string
                region:
                  type: string
                checks:
                  type: object
                  properties:
                    api:
                      type: boolean
                    lambda:
                      type: boolean

    DeviceRegistrationRequest:
      type: object
      properties:
        deviceId:
          type: string
          description: Unique device identifier for ESP32 receiver
          example: "acorn-receiver-001"
        deviceName:
          type: string
          description: Human-readable device name
          example: "Living Room Receiver"
        serialNumber:
          type: string
          description: Hardware serial number
          example: "SN123456789"
        macAddress:
          type: string
          description: Device MAC address
          example: "AA:BB:CC:DD:EE:FF"
      required:
        - deviceId
        - deviceName
        - serialNumber
        - macAddress

    DeviceRegistrationResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                deviceId:
                  type: string
                deviceName:
                  type: string
                serialNumber:
                  type: string
                ownerId:
                  type: string
                registeredAt:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum: [pending, active]
                certificates:
                  type: object
                  properties:
                    deviceCertificate:
                      type: string
                      description: AWS IoT Core device certificate (PEM format)
                    privateKey:
                      type: string
                      description: Device private key (PEM format)
                    iotEndpoint:
                      type: string
                      description: AWS IoT Core endpoint URL

    Device:
      type: object
      properties:
        deviceId:
          type: string
        deviceName:
          type: string
        serialNumber:
          type: string
        isOnline:
          type: boolean
        lastSeen:
          type: string
          format: date-time
        registeredAt:
          type: string
          format: date-time
        firmwareVersion:
          type: string
        settings:
          $ref: '#/components/schemas/DeviceSettings'
        permissions:
          type: object
          properties:
            notifications:
              type: boolean
            settings:
              type: boolean

    DeviceSettings:
      type: object
      properties:
        soundEnabled:
          type: boolean
          description: Whether device makes sounds
        soundVolume:
          type: integer
          minimum: 1
          maximum: 10
          description: Device sound volume (1-10 scale)
        ledBrightness:
          type: integer
          minimum: 1
          maximum: 10
          description: LED brightness level (1-10 scale)
        notificationCooldown:
          type: integer
          minimum: 0
          description: Seconds between notifications
        quietHoursEnabled:
          type: boolean
          description: Whether quiet hours are active
        quietHoursStart:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "22:00"
          description: Time to stop ringing locally
        quietHoursEnd:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "07:00"
          description: Time to resume ringing locally

    UserDevicesResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/Device'
                total:
                  type: integer

    DeviceSettingsRequest:
      type: object
      properties:
        soundEnabled:
          type: boolean
        soundVolume:
          type: integer
          minimum: 1
          maximum: 10
        ledBrightness:
          type: integer
          minimum: 1
          maximum: 10
        notificationCooldown:
          type: integer
          minimum: 0
        quietHoursEnabled:
          type: boolean
        quietHoursStart:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
        quietHoursEnd:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'

    DeviceSettingsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/DeviceSettings'

    DeviceResetResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                deviceId:
                  type: string
                message:
                  type: string
                  example: "Device reset initiated successfully"
                resetInitiatedAt:
                  type: string
                  format: date-time

    UserInviteRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of user to invite
        notificationsPermission:
          type: boolean
          description: Can receive notifications from this device
          default: true
        settingsPermission:
          type: boolean
          description: Can modify device settings
          default: false
      required:
        - email

    UserInviteResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                invitationId:
                  type: string
                email:
                  type: string
                deviceId:
                  type: string
                deviceName:
                  type: string
                notificationsPermission:
                  type: boolean
                settingsPermission:
                  type: boolean
                expiresAt:
                  type: string
                  format: date-time
                sentAt:
                  type: string
                  format: date-time

    Invitation:
      type: object
      properties:
        invitationId:
          type: string
        deviceId:
          type: string
        deviceName:
          type: string
        invitedBy:
          type: string
          description: Name/email of user who sent invitation
        notificationsPermission:
          type: boolean
        settingsPermission:
          type: boolean
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    UserInvitationsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                invitations:
                  type: array
                  items:
                    $ref: '#/components/schemas/Invitation'
                total:
                  type: integer

    InvitationActionResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                invitationId:
                  type: string
                action:
                  type: string
                  enum: [accepted, declined]
                message:
                  type: string
                processedAt:
                  type: string
                  format: date-time
                deviceId:
                  type: string
                deviceName:
                  type: string

tags:
  - name: System
    description: System health and status endpoints
  - name: Device Management
    description: ESP32 receiver registration, settings, and reset functionality
  - name: User Management
    description: User access control, invitations, and device sharing 